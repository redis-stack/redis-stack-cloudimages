name: AWS CI

on:
  workflow_call:
    inputs:
      cloud-platform:
        required: true
        type: string
      deregister:
        required: true
        type: boolean
        default: true

    secrets:
      AWS_ACCESS_KEY:
        required: true
      AWS_SECRET_KEY:
        required: true
      SSH_PRIVATE_KEY:
        required: true

jobs:
  create-instances:
    name: Create instance from image
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Download image artifacts
      uses: actions/download-artifact@v2
      with:
        name: ${{ inputs.cloud-platform }}-artifacts.json

    - name: Setup jq
      run: sudo apt-get update && sudo apt-get install -y jq

    - name: Extract image ID's and regions
      run: |
        redis_stack_x86_image_id=$(cat ${{ inputs.cloud-platform }}-artifacts.json | jq -r '.builds[] | select(.name == "redis-stack-x86").artifact_id | split(":") | .[1]' )
        echo "redis_stack_x86_image_id='${redis_stack_x86_image_id}'" >> $GITHUB_ENV
        redis_stack_x86_region=$(cat ${{ inputs.cloud-platform }}-artifacts.json | jq -r '.builds[] | select(.name == "redis-stack-x86").artifact_id | split(":") | .[0]' )
        echo "redis_stack_x86_region='${redis_stack_x86_region}'" >> $GITHUB_ENV
    #     redis-stack-arm-image-id=$(jq -r '.builds[] | select(.name == "redis-stack-arm") | ${{ inputs.cloud-platform }}-artifacts.json)
    #     echo "redis-stack-arm-image-id=${redis-stack-arm-image-id}" >> $GITHUB_ENV

    #create ssh key for ec2
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
        aws-region: us-east-1 #until we support multi regions

    - name: check-key-pair
      run: |
        aws ec2 describe-key-pairs --key-name redis-stack-packer-ci --query 'KeyPairs[*].KeyName' --output text
      id: check-key-pair

    - name: Create an EC2 instance - x86
      id: create_ec2_instance
      run: |
        output=$(aws ec2 run-instances \
        --image-id ${{ env.redis_stack_x86_image_id }} \
        --key-name redis-stack-packer-ci \
        --region ${{ env.redis_stack_x86_region }} \
        --instance-type t2.micro \
        --associate-public-ip-address \
        --tag-specifications 'ResourceType=instance,Tags=[{Key=Name,Value=redis-stack-x86}]')
        instance_id=$(echo $output | jq -r '.Instances[0].InstanceId')
        public_ip=$(aws ec2 describe-instances --instance-ids $instance_id --query 'Reservations[*].Instances[*].[PublicIpAddress]' --output text | tr '\t' '\n')
        echo "::set-output name=public_ip::$public_ip"
        echo "::set-output name=instance_id::$instance_id"

    - name: echo ip
      run: |
        aws ec2 describe-instances --instance-ids ${{ steps.create_ec2_instance.outputs.instance_id }} --query 'Reservations[*].Instances[*].[PublicIpAddress]' --output text | tr '\t' '\n'

    - name: Wait for EC2 Instance
      run: |
        # Set the timeout value in seconds
        TIMEOUT=600

        status=$(aws ec2 describe-instances --instance-ids ${{ steps.create_ec2_instance.outputs.instance_id }} --query 'Reservations[].Instances[].State[].Name' --output text)
        elapsed_time=0
        while [[ $status != "running" && $elapsed_time -lt $TIMEOUT ]]; do
          sleep 10
          elapsed_time=$((elapsed_time + 10))
          status=$(aws ec2 describe-instances --instance-ids ${{ steps.create_ec2_instance.outputs.instance_id }} --query 'Reservations[].Instances[].State[].Name' --output text)
        done

        if [[ $status == "running" ]]; then
            # Wait an additional 60 seconds for safety
            sleep 50
            echo "Instance is up and running, and 60 seconds have passed for safety."
        else
            echo "Instance did not become running within $TIMEOUT seconds."
        fi

    - name: validate modules are installed in redis-server
      uses: appleboy/ssh-action@master
      with:
        host: ${{ steps.create_ec2_instance.outputs.public_ip }}
        username: ubuntu
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          # Delete all SSH authorized keys for the current user
          sudo rm -f ~/.ssh/authorized_keys
          sudo apt install redis-tools
          sleep 10
          redis_modules=$(redis-cli module list | wc | awk '{print $1}')
          if [ "$redis_modules" -gt 1 ]; then
            echo "Redis has more than one module installed."
          else
            echo "Redis has no modules installed"
            exit 1
          fi

    - name: Terminate EC2 instance - x86
      if: always() && steps.create_ec2_instance.outcome == 'success'
      run: |
        aws ec2 terminate-instances --instance-ids ${{ steps.create_ec2_instance.outputs.instance_id }} --region ${{ env.redis_stack_x86_region }}

    - name: Deregister x86 AMI 
      if: always() && inputs.deregister == true
      run: |
        aws ec2 deregister-image --image-id=${{ env.redis_stack_x86_image_id }} --region=${{ env.redis_stack_x86_region }}
      
    # - name: Create an EC2 instance - arm
    #   env:
    #     redis-stack-arm-image-id: $(jq -r '.builds[] | select(.name == "redis-stack-arm") | ${{ inputs.cloud-platform }}-artifacts.json)
    #   run: |
  #      aws ec2 run-instances --image-id ${{ env.redis-stack-arm-image-id }} --key-name redis-stack-packer-ci

    # - name: SSH into the EC2 instance and test - arm
    #   uses: aws-actions/ssh-action@main
    #   with:
    #     host: ${{ steps.create_ec2_instance.outputs.public_ip }}
    #     username: ubuntu
    #     key: redis-stack-packer-ci.pem
    #     commands: |
    #       # Install Python and pip
    #       sudo apt-get update
    #       sudo apt-get install -y python3 python3-pip
          
    #       # Install pipenv
    #       pip3 install pipenv
          
    #       # Clone redis-stack/redis-stack repo
    #       git clone https://github.com/redis-stack/redis-stack.git
          
    #       # Change directory
    #       cd redis-stack
          
    #       # Install the dependencies
    #       pipenv install --dev
          
    #       # Run pytest command
    #       pipenv run pytest -m "jammy"
