name: AWS CI

on:
  workflow_call:
    inputs:
      cloud-platform:
        required: true
        type: string
      deregister:
        required: true
        type: boolean
        default: true


jobs:
  create-instances:
    name: Create instance from image
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Download image artifacts
      uses: actions/download-artifact@v2
      with:
        name: ${{ inputs.cloud-platform }}-artifacts.json

    - name: Setup jq
      run: sudo apt-get update && sudo apt-get install -y jq

    # - name: Extract image ID's
    #   run: |
    #     redis-stack-arm-image-id=$(jq -r '.builds[] | select(.name == "redis-stack-arm") | ${{ inputs.cloud-platform }}-artifacts.json)
    #     echo "redis-stack-arm-image-id=${redis-stack-arm-image-id}" >> $GITHUB_ENV
    #     redis-stack-x86-image-id=$(jq -r '.builds[] | select(.name == "redis-stack-x86") | ${{ inputs.cloud-platform }}-artifacts.json)
    #     echo "redis-stack-x86-image-id=${redis-stack-x86-image-id}" >> $GITHUB_ENV

    #create ssh key for ec2
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1 #until we support multi regions

    - name: check-key-pair
      run: |
        aws ec2 describe-key-pairs --key-name redis-stack-packer-ci --query 'KeyPairs[*].KeyName' --output text
      id: check-key-pair

    - name: Create key pair if it does not exist
      if: steps.check-key-pair.outputs.stdout == ''
      run: |
        aws ec2 create-key-pair --key-name redis-stack-packer-ci --query 'KeyMaterial' --output text > redis-stack-packer-ci.pem

    - name: Print message if key pair already exists
      if: steps.check-key-pair.outputs.stdout != ''
      run: echo "Key pair 'redis-stack-packer-ci' already exists, skipping creation."

    # - name: Create an EC2 instance - arm
    #   env:
    #     redis-stack-arm-image-id: $(jq -r '.builds[] | select(.name == "redis-stack-arm") | ${{ inputs.cloud-platform }}-artifacts.json)
    #   run: |
  #      aws ec2 run-instances --image-id ${{ env.redis-stack-arm-image-id }} --key-name redis-stack-packer-ci

    # - name: SSH into the EC2 instance and test - arm
    #   uses: aws-actions/ssh-action@main
    #   with:
    #     host: ${{ steps.create_ec2_instance.outputs.public_ip }}
    #     username: ubuntu
    #     key: redis-stack-packer-ci.pem
    #     commands: |
    #       # Install Python and pip
    #       sudo apt-get update
    #       sudo apt-get install -y python3 python3-pip
          
    #       # Install pipenv
    #       pip3 install pipenv
          
    #       # Clone redis-stack/redis-stack repo
    #       git clone https://github.com/redis-stack/redis-stack.git
          
    #       # Change directory
    #       cd redis-stack
          
    #       # Install the dependencies
    #       pipenv install --dev
          
    #       # Run pytest command
    #       pipenv run pytest -m "jammy"

    - name: Create an EC2 instance - x86
      env:
        redis-stack-x86-image-id: $(jq -r '.builds[] | select(.name == "redis-stack-x86") | ${{ inputs.cloud-platform }}-artifacts.json)
      run: |
        aws ec2 run-instances --image-id ${{ env.redis-stack-x86-image-id }} --key-name redis-stack-packer-ci 

    - name: SSH into the EC2 instance - x86
      uses: appleboy/ssh-action@v0.1.7
      with:
        host: ${{ steps.create_ec2_instance.outputs.public_ip }}
        username: ubuntu
        key_path: redis-stack-packer-ci.pem
        script: |
          # Install Python and pip
          sudo apt-get update
          sudo apt-get install -y python3 python3-pip
          
          # Install pipenv
          pip3 install pipenv
          
          # Clone redis-stack/redis-stack repo
          git clone https://github.com/redis-stack/redis-stack.git
          
          # Change directory
          cd redis-stack
          
          # Install the dependencies
          pipenv install --dev
          
          # Run pytest command
          pipenv run pytest -m 'jammy and not arm'

    # - name: Deregister AMI 
    #   if: ${{ inputs.deregister == true }}
    #   run: |
    #     aws ec2 deregister-image --image-id="ami-055ff4aae33b69ace" --region="us-east-1"
      